console.log("module basic");
/* 코드 재사용을 위해 하나의 애플리케이션 큰 기능을 작은 기능 단위로 잘게 분리하여 관리 */
/* 독립적으로 기능하여 결합도가 낮아 소스코드가 없더라도 에러가 발생하지 않아야 하며 블록쌓기처럼 해당 기능을 import만 하여 다른 프로젝트에서도 재사용가능 */

//ECMA6이전에는 표준으로 제공하지 않아 네임스페이스 패턴을 통해 모듈을 정의
//C#언어에서 코드 그룹화와 이름 충돌방지를 위해 제공하는 기능이지만 직접적으로 JS에서는 지원하지 않는다.
//따라서 즉각 호출 패턴을 통하여 네임스페이스와 유사하게 구현
var namespaceA = (function () {
  var privateVariable = "비공개 변수";
  return {
    publicApi: function () {
      console.log(privateVariable + "를 접근할 수 있습니다.");
    },
  };
})();

namespaceA.publicApi();

//console.log(privateVariable);//함수안에서 선언된 변수는 함수내에서만 접근가능하기 때문에 외부에서 접근 못함

//네임스페이스패턴
//전역변수를 기초로 하는 JS이기에 여러 스크립트가 한페이지안에 함께있는 소스코드의 경우 이름이 겹칠 경우가 많아지며 어느 곳에서든 접근이 가능하여
//소스 코드의 신뢰성으 떨어뜨릴 수 있다. 그중에 하나인 네임스페이스 패턴을 통해 보완
